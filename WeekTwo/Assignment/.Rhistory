GetStateStormData <- function( stormDataFrame, EffectName, EventType, cutOffLabels=1.0) {
## stormDataFrame, ST=state abbreviation, EffectName=exact data frame column heading
## Subset the storm.data.frame
#storm_data_ST <- stormDataFrame[stormDataFrame$STATE == ST,]
storm_data_ST_EvtType <- stormDataFrame[ stormDataFrame$EVT_TYPE == EventType
& stormDataFrame[EffectName]>=1,]
maxVal<-max(storm_data_ST_EvtType[EffectName]) # extract the value
scaling_factor<- cutOffLabels * maxVal/6.0
cex_values <- sapply( X=as.vector(storm_data_ST_EvtType[EffectName]),
FUN=function(x) x/scaling_factor )
#    points(-storm_data_ST_EvtType$LONGITUDE/100, storm_data_ST_EvtType$LATITUDE/100,
#           pch=21, bg=alpha("red",0.25), cex=cex_values)
ST_EvtType <- storm_data_ST_EvtType[ storm_data_ST_EvtType[EffectName] >= scaling_factor, ]
years <- as.character(format( as.Date(ST_EvtType$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
effectCount <- as.character(ST_EvtType[EffectName][,1])
yearEffectCount <- paste0(years,rep(x=" (",length(years)), effectCount,rep(x=")",length(years)))
maxLabel <- max(as.numeric(effectCount))
scaling_factor_label <- maxLabel/1.5
cex_labels <- sapply( X=as.vector(effectCount),FUN=function(x) as.numeric(x)/scaling_factor_label )
pos_labels <- rep(c(2,1,1,4),times=(length(cex_labels)/4))
#    text( -ST_EvtType$LONGITUDE/100, cex=cex_labels, ST_EvtType$LATITUDE/100, labels=yearEffectCount, pos=pos_labels )
df <- storm_data_ST_EvtType[storm_data_ST_EvtType$LATITUDE > 0 & storm_data_ST_EvtType$LONGITUDE > 0,]
dfMod <- transform( df, LATITUDE=df$LATITUDE/100, LONGITUDE=-df$LONGITUDE/100)
}
dfFatalities <- GetStateStormData(df,"FATALITIES","Hurricanes/Tornados/Thunderstorms")
#paste0("ALL = ",length(df$COUNTY))
#paste0("AL = ", length(dfST$COUNTY))
#paste0("Ratio = ", length(dfST$COUNTY)/length(df$COUNTY) )
library(leaflet)
#df %>%
popup_labels <- sapply( X=dfFatalities$FATALITIES,FUN=function(x) paste0( as.character(x), " fatalities") )
dfFatalities$BGN_DATE[234]
year(dfFatalities$BGN_DATE[234])
as.date(year(dfFatalities$BGN_DATE[234])
)
as.Date(year(dfFatalities$BGN_DATE[234]), format="%Y")
as.Date(dfFatalities$BGN_DATE[234]), format="%Y")
as.Date(dfFatalities$BGN_DATE[234], format="%Y")
as.Date(dfFatalities$BGN_DATE[234])
dfFatalities$BGN_DATE[234]
as.Date(dfFatalities$BGN_DATE[234], format="%d-%m%-%Y")
as.Date(dfFatalities$BGN_DATE[234], format="%d-%m%-%YYYY")
as.Date(dfFatalities$BGN_DATE[234], format="%d/%m%/%YYYY")
as.Date(dfFatalities$BGN_DATE[234], format="%d/%m%/%Y")
as.Date(dfFatalities$BGN_DATE[234])
dfFatalities$BGN_DATE[234]
class(dfFatalities$BGN_DATE[234])
as.Date(as.character(dfFatalities$BGN_DATE[234]))
as.character(dfFatalities$BGN_DATE[234])
as.character(dfFatalities$BGN_DATE[234])[5:8]
as.character(dfFatalities$BGN_DATE[234])[1]
as.character(dfFatalities$BGN_DATE[234])[1][1]
as.character(dfFatalities$BGN_DATE[234])
class(as.character(dfFatalities$BGN_DATE[234]))
strftime(as.character(dfFatalities$BGN_DATE[234]), "%Y")
strftime(as.character(dfFatalities$BGN_DATE[234]), "%m/%d/%Y")
strftime(as.character(dfFatalities$BGN_DATE[234]), "%m/%Y")
strftime(as.character(dfFatalities$BGN_DATE[234]), "%Y")
strftime(as.character(dfFatalities$BGN_DATE[234]), "%m/%d/%Y")
strftime(as.character(dfFatalities$BGN_DATE[234]), "%d/%m/%Y")
strftime(dfFatalities$BGN_DATE[234], "%m/%d/%Y")
strftime(dfFatalities$BGN_DATE[234])
strftime(as.character(dfFatalities$BGN_DATE[234]), "%d/%m/%YY")
strftime(as.character(dfFatalities$BGN_DATE[234]), "%d/%m/%y")
as.Date.factor(dfFatalities$BGN_DATE[234]))
as.Date.factor(dfFatalities$BGN_DATE[234])
as.Date.factor(dfFatalities$BGN_DATE[234],format= "%d/%m/%Y")
class(as.Date.factor(dfFatalities$BGN_DATE[234],format= "%d/%m/%Y"))
as.Date.factor(dfFatalities$BGN_DATE[234],format= "%d/%m/%Y")$Y
as.Date.factor(dfFatalities$BGN_DATE[234],format= "%d/%m/%Y")[Y]
as.numeric(strftime(as.Date.factor(dfFatalities$BGN_DATE[234],format= "%d/%m/%Y"),"%Y"))
as.character(strftime(as.Date.factor(dfFatalities$BGN_DATE[234],format= "%d/%m/%Y"),"%Y"))
as.character(strftime(as.Date.factor(dfFatalities$BGN_DATE[234],format= "%d/%m/%Y"),"%Y-%m"))
as.character(strftime(as.Date.factor(dfFatalities$BGN_DATE[234],format= "%d/%m/%Y"),"%Y-%m-%d"))
as.character(strftime(as.Date.factor(dfFatalities$BGN_DATE[234],format= "%d/%m/%Y"),"%Y-%mm-%d"))
as.character(strftime(as.Date.factor(dfFatalities$BGN_DATE[234],format= "%d/%m/%Y"),"%Y-%M-%d"))
as.character(strftime(as.Date.factor(dfFatalities$BGN_DATE[234],format= "%d/%m/%Y"),"%Y-%m-%d"))
mapply(FUN=function(x,y,z) paste0( as.character(y), ": " , z, " ", as.character(x), " fatalities ). dfFatalities$FATALITIES, yeasrs, dfFatalities$EVTYPE)
)
)
)
mapply(FUN=function(x,y,z) paste0( as.character(y), ": " , z, " ", as.character(x), " fatalities"), dfFatalities$FATALITIES, years, dfFatalities$EVTYPE)
years <-as.character(strftime(as.Date.factor(dfFatalities$BGN_DATE[234],format= "%d/%m/%Y"),"%Y-%m-%d"))
years <-as.character(strftime(as.Date.factor(dfFatalities$BGN_DATE,format= "%d/%m/%Y"),"%Y-%m-%d"))
years[234]
mapply(FUN=function(x,y,z) paste0( as.character(y), ": " , z, " ", as.character(x), " fatalities"), dfFatalities$FATALITIES, years, dfFatalities$EVTYPE)
#load storm data as df
load(file="./usa_storm_data.RData")
#Testing that there is actually data to work with:
#df[df$EVT_TYPE == "Hurricanes/Tornados/Thunderstorms" & df$FATALITIES > 100,][c('STATE','LATITUDE','LONGITUDE')]
GetStateStormData <- function( stormDataFrame, EffectName, EventType, cutOffLabels=1.0) {
## stormDataFrame, ST=state abbreviation, EffectName=exact data frame column heading
## Subset the storm.data.frame
#storm_data_ST <- stormDataFrame[stormDataFrame$STATE == ST,]
storm_data_ST_EvtType <- stormDataFrame[ stormDataFrame$EVT_TYPE == EventType
& stormDataFrame[EffectName]>=1,]
maxVal<-max(storm_data_ST_EvtType[EffectName]) # extract the value
scaling_factor<- cutOffLabels * maxVal/6.0
cex_values <- sapply( X=as.vector(storm_data_ST_EvtType[EffectName]),
FUN=function(x) x/scaling_factor )
#    points(-storm_data_ST_EvtType$LONGITUDE/100, storm_data_ST_EvtType$LATITUDE/100,
#           pch=21, bg=alpha("red",0.25), cex=cex_values)
ST_EvtType <- storm_data_ST_EvtType[ storm_data_ST_EvtType[EffectName] >= scaling_factor, ]
years <- as.character(format( as.Date(ST_EvtType$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
effectCount <- as.character(ST_EvtType[EffectName][,1])
yearEffectCount <- paste0(years,rep(x=" (",length(years)), effectCount,rep(x=")",length(years)))
maxLabel <- max(as.numeric(effectCount))
scaling_factor_label <- maxLabel/1.5
cex_labels <- sapply( X=as.vector(effectCount),FUN=function(x) as.numeric(x)/scaling_factor_label )
pos_labels <- rep(c(2,1,1,4),times=(length(cex_labels)/4))
#    text( -ST_EvtType$LONGITUDE/100, cex=cex_labels, ST_EvtType$LATITUDE/100, labels=yearEffectCount, pos=pos_labels )
df <- storm_data_ST_EvtType[storm_data_ST_EvtType$LATITUDE > 0 & storm_data_ST_EvtType$LONGITUDE > 0,]
dfMod <- transform( df, LATITUDE=df$LATITUDE/100, LONGITUDE=-df$LONGITUDE/100)
}
dfFatalities <- GetStateStormData(df,"FATALITIES","Hurricanes/Tornados/Thunderstorms")
#paste0("ALL = ",length(df$COUNTY))
#paste0("AL = ", length(dfST$COUNTY))
#paste0("Ratio = ", length(dfST$COUNTY)/length(df$COUNTY) )
library(leaflet)
#df %>%
#popup_labels <- sapply( X=dfFatalities$FATALITIES,FUN=function(x) paste0( as.character(x), " fatalities") )
popup_labels <- mapply(FUN=function(x,y,z) paste0( as.character(y), ": " , z, " ", as.character(x), " fatalities"), dfFatalities$FATALITIES, years, dfFatalities$EVTYPE)
load(file="./usa_storm_data.RData")
#Testing that there is actually data to work with:
#df[df$EVT_TYPE == "Hurricanes/Tornados/Thunderstorms" & df$FATALITIES > 100,][c('STATE','LATITUDE','LONGITUDE')]
GetStateStormData <- function( stormDataFrame, EffectName, EventType, cutOffLabels=1.0) {
## stormDataFrame, ST=state abbreviation, EffectName=exact data frame column heading
## Subset the storm.data.frame
#storm_data_ST <- stormDataFrame[stormDataFrame$STATE == ST,]
storm_data_ST_EvtType <- stormDataFrame[ stormDataFrame$EVT_TYPE == EventType
& stormDataFrame[EffectName]>=1,]
maxVal<-max(storm_data_ST_EvtType[EffectName]) # extract the value
scaling_factor<- cutOffLabels * maxVal/6.0
cex_values <- sapply( X=as.vector(storm_data_ST_EvtType[EffectName]),
FUN=function(x) x/scaling_factor )
#    points(-storm_data_ST_EvtType$LONGITUDE/100, storm_data_ST_EvtType$LATITUDE/100,
#           pch=21, bg=alpha("red",0.25), cex=cex_values)
ST_EvtType <- storm_data_ST_EvtType[ storm_data_ST_EvtType[EffectName] >= scaling_factor, ]
years <- as.character(format( as.Date(ST_EvtType$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
effectCount <- as.character(ST_EvtType[EffectName][,1])
yearEffectCount <- paste0(years,rep(x=" (",length(years)), effectCount,rep(x=")",length(years)))
maxLabel <- max(as.numeric(effectCount))
scaling_factor_label <- maxLabel/1.5
cex_labels <- sapply( X=as.vector(effectCount),FUN=function(x) as.numeric(x)/scaling_factor_label )
pos_labels <- rep(c(2,1,1,4),times=(length(cex_labels)/4))
#    text( -ST_EvtType$LONGITUDE/100, cex=cex_labels, ST_EvtType$LATITUDE/100, labels=yearEffectCount, pos=pos_labels )
df <- storm_data_ST_EvtType[storm_data_ST_EvtType$LATITUDE > 0 & storm_data_ST_EvtType$LONGITUDE > 0,]
dfMod <- transform( df, LATITUDE=df$LATITUDE/100, LONGITUDE=-df$LONGITUDE/100)
}
dfFatalities <- GetStateStormData(df,"FATALITIES","Hurricanes/Tornados/Thunderstorms")
#paste0("ALL = ",length(df$COUNTY))
#paste0("AL = ", length(dfST$COUNTY))
#paste0("Ratio = ", length(dfST$COUNTY)/length(df$COUNTY) )
library(leaflet)
#df %>%
#popup_labels <- sapply( X=dfFatalities$FATALITIES,FUN=function(x) paste0( as.character(x), " fatalities") )
years <-as.character(strftime(as.Date.factor(dfFatalities$BGN_DATE,format= "%d/%m/%Y"),"%Y-%m-%d"))
popup_labels <- mapply(FUN=function(x,y,z) paste0( as.character(y), ": " , z, " ", as.character(x), " fatalities"), dfFatalities$FATALITIES, years, dfFatalities$EVTYPE)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data= dfFatalities,lat = ~ LATITUDE, lng = ~ LONGITUDE) %>%
addPopups(lng = dfFatalities$LONGITUDE, lat = dfFatalities$LATITUDE, popup_labels)
popup_labels
leaflet() %>%
addTiles() %>%
addCircleMarkers(data= dfFatalities,lat = ~ LATITUDE, lng = ~ LONGITUDE) %>%
addPopups(lng = dfFatalities$LONGITUDE, lat = dfFatalities$LATITUDE, popup_labels)
popup_labels <- mapply(FUN=function(x,y,z) paste(sep="<br/>", paste0("Date: ",y), paste0(z, " ", as.character(x), " fatalities")), dfFatalities$FATALITIES, years, dfFatalities$EVTYPE)
popup_labels[234]
leaflet() %>%
addTiles() %>%
addCircleMarkers(data= dfFatalities,lat = ~ LATITUDE, lng = ~ LONGITUDE) %>%
addPopups(lng = dfFatalities$LONGITUDE, lat = dfFatalities$LATITUDE, popup_labels)
leaflet() %>%
addTiles() %>%
addCircleMarkers(data= dfFatalities,lat = ~ LATITUDE, lng = ~ LONGITUDE) %>%
addPopups(lng = dfFatalities$LONGITUDE, lat = dfFatalities$LATITUDE, popup_labels)
content <- paste(sep = "<br/>",
"<b><a href='http://www.samurainoodle.com'>Samurai Noodle</a></b>",
"606 5th Ave. S",
"Seattle, WA 98138"
)
leaflet() %>% addTiles() %>%
addPopups(-122.327298, 47.597131, content,
options = popupOptions(closeButton = FALSE)
)
content
popup_labels <- mapply(FUN=function(x,y,z) paste(sep="<br/>", paste0("Date: ",y), paste0(z, " ", as.character(x), " fatalities")), dfFatalities$FATALITIES, years, dfFatalities$EVTYPE)
popup_labels[1]
install.packages("htmltools")
c <- "C"
c=="C"
dfFatalTornados <- dfFatalities[dfFatalities$EVTYPE=="TORNADO",]
dfFatalTornados
head(dfFatalTornados)
labels(dfFatalities$EVTYPE)
as.factor(dfFatalities$EVTYPE)
levels(dfFatalities$EVTYPE)
Levels(dfFatalities$EVTYPE)
(dfFatalities$EVTYPE)
(dfFatalities$EVTYPE[999:1999])
(dfFatalities$EVTYPE[1999:2999])
knitr::opts_chunk$set(echo = FALSE)
library(leaflet)
#load storm data as df
load(file="./usa_storm_data.RData")
#Testing that there is actually data to work with:
#df[df$EVT_TYPE == "Hurricanes/Tornados/Thunderstorms" & df$FATALITIES > 100,][c('STATE','LATITUDE','LONGITUDE')]
GetStateStormData <- function( stormDataFrame, EffectName, EventType, cutOffLabels=1.0) {
## stormDataFrame, ST=state abbreviation, EffectName=exact data frame column heading
## Subset the storm.data.frame
#storm_data_ST <- stormDataFrame[stormDataFrame$STATE == ST,]
storm_data_ST_EvtType <- stormDataFrame[ stormDataFrame$EVT_TYPE == EventType
& stormDataFrame[EffectName]>=1,]
maxVal<-max(storm_data_ST_EvtType[EffectName]) # extract the value
scaling_factor<- cutOffLabels * maxVal/6.0
cex_values <- sapply( X=as.vector(storm_data_ST_EvtType[EffectName]),
FUN=function(x) x/scaling_factor )
#    points(-storm_data_ST_EvtType$LONGITUDE/100, storm_data_ST_EvtType$LATITUDE/100,
#           pch=21, bg=alpha("red",0.25), cex=cex_values)
ST_EvtType <- storm_data_ST_EvtType[ storm_data_ST_EvtType[EffectName] >= scaling_factor, ]
years <- as.character(format( as.Date(ST_EvtType$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
effectCount <- as.character(ST_EvtType[EffectName][,1])
yearEffectCount <- paste0(years,rep(x=" (",length(years)), effectCount,rep(x=")",length(years)))
maxLabel <- max(as.numeric(effectCount))
scaling_factor_label <- maxLabel/1.5
cex_labels <- sapply( X=as.vector(effectCount),FUN=function(x) as.numeric(x)/scaling_factor_label )
pos_labels <- rep(c(2,1,1,4),times=(length(cex_labels)/4))
#    text( -ST_EvtType$LONGITUDE/100, cex=cex_labels, ST_EvtType$LATITUDE/100, labels=yearEffectCount, pos=pos_labels )
df <- storm_data_ST_EvtType[storm_data_ST_EvtType$LATITUDE > 0 & storm_data_ST_EvtType$LONGITUDE > 0,]
dfMod <- transform( df, LATITUDE=df$LATITUDE/100, LONGITUDE=-df$LONGITUDE/100)
}
GenerateFatalityLabels <- function(df){
yearsTornados <-as.character(strftime(as.Date.factor(df$BGN_DATE,format= "%d/%m/%Y"),"%Y-%m-%d"))
mapply(FUN=function(x,y,z) paste(sep=" ",
ifelse(is.na(y), "No date: ", paste0(y, ": ")),
paste0(z, " ", as.character(x),
ifelse(x<2," fatality"," fatalities"))),
df$FATALITIES,
yearsTornados,
df$EVTYPE)
}
dfFatalities0 <- GetStateStormData(df,"FATALITIES","Hurricanes/Tornados/Thunderstorms")
dfFatalities <- head(dfFatalities0)
#paste0("ALL = ",length(df$COUNTY))
#paste0("AL = ", length(dfST$COUNTY))
#paste0("Ratio = ", length(dfST$COUNTY)/length(df$COUNTY) )
#df %>%
#popup_labels <- sapply( X=dfFatalities$FATALITIES,FUN=function(x) paste0( as.character(x), " fatalities") )
years <-as.character(strftime(as.Date.factor(dfFatalities$BGN_DATE,format= "%d/%m/%Y"),"%Y-%m-%d"))
popup_labels <- mapply(FUN=function(x,y,z) paste(sep=" ",
ifelse(is.na(y), "No date: ", paste0(y, ": ")),
paste0(z, " ", as.character(x),
ifelse(x<2," fatality"," fatalities"))),
dfFatalities$FATALITIES,
years,
dfFatalities$EVTYPE)
dfFatalities$Label <- popup_labels
dfFatalTornados <- dfFatalities[dfFatalities$EVTYPE=="TORNADO",]
dfFatalHighWind <- dfFatalities[dfFatalities$EVTYPE=="HIGH WIND",]
dfFatalThunderWind <- dfFatalities[dfFatalities$EVTYPE=="THUNDERSTORM WIND",]
dfFatalMarineWind <- dfFatalities[(dfFatalities$EVTYPE=="MARINE STRONG WIND") | (dfFatalities$EVTYPE == "MARINE THUNDERSTORM WIND"),]
dfFatalTornados$Labels <- GenerateFatalityLabels(dfFatalTornados)
dfFatalHighWind$Labels <- GenerateFatalityLabels(dfFatalHighWind)
dfFatalThunderWind$Labels <- GenerateFatalityLabels(dfFatalThunderWind)
dfFatalMarineWind$Labels <- GenerateFatalityLabels(dfFatalMarineWind)
leaflet() %>%
addTiles() %>%
addMarkers(data= dfFatalTornados,
lat = ~ LATITUDE,
lng = ~ LONGITUDE,
label = ~ Label,
labelOptions = labelOptions(noHide = F, textsize = "12px"),
clusterOptions = markerClusterOptions(),
group = "Tornados")
leaflet() %>%
addTiles() %>%
addMarkers(data= dfFatalTornados,
lat = ~ LATITUDE,
lng = ~ LONGITUDE,
label = ~ Label,
labelOptions = labelOptions(noHide = F, textsize = "12px"),
clusterOptions = markerClusterOptions(),
group = "Tornados") %>%
addMarkers(data= dfFatalHighWind,
lat = ~ LATITUDE,
lng = ~ LONGITUDE,
label = ~ Label,
labelOptions = labelOptions(noHide = F, textsize = "12px"),
clusterOptions = markerClusterOptions(),
group = "High Winds")
leaflet() %>%
addTiles() %>%
addMarkers(data= dfFatalTornados,
lat = ~ LATITUDE,
lng = ~ LONGITUDE,
label = ~ Label,
labelOptions = labelOptions(noHide = F, textsize = "12px"),
clusterOptions = markerClusterOptions(),
group = "Tornados") %>%
addMarkers(data= dfFatalHighWind,
lat = ~ LATITUDE,
lng = ~ LONGITUDE,
label = ~ Label,
labelOptions = labelOptions(noHide = F, textsize = "12px"),
clusterOptions = markerClusterOptions(),
group = "High Winds") %>%
addLayersControl(
overlayGroups=c("Tornados","High Winds"),
options=layersControlOptions(collapsed=FALSE))
list(c("a,"B))
list(c("a","B""))
l<-list(c("a","B"))
l
as.vector(l)
c(l)
unlist(l)
library(leaflet)
#load storm data as df
load(file="./usa_storm_data.RData")
#Testing that there is actually data to work with:
#df[df$EVT_TYPE == "Hurricanes/Tornados/Thunderstorms" & df$FATALITIES > 100,][c('STATE','LATITUDE','LONGITUDE')]
GetStateStormData <- function( stormDataFrame, EffectName, EventType, cutOffLabels=1.0) {
## stormDataFrame, ST=state abbreviation, EffectName=exact data frame column heading
## Subset the storm.data.frame
#storm_data_ST <- stormDataFrame[stormDataFrame$STATE == ST,]
storm_data_ST_EvtType <- stormDataFrame[ stormDataFrame$EVT_TYPE == EventType
& stormDataFrame[EffectName]>=1,]
maxVal<-max(storm_data_ST_EvtType[EffectName]) # extract the value
scaling_factor<- cutOffLabels * maxVal/6.0
cex_values <- sapply( X=as.vector(storm_data_ST_EvtType[EffectName]),
FUN=function(x) x/scaling_factor )
#    points(-storm_data_ST_EvtType$LONGITUDE/100, storm_data_ST_EvtType$LATITUDE/100,
#           pch=21, bg=alpha("red",0.25), cex=cex_values)
ST_EvtType <- storm_data_ST_EvtType[ storm_data_ST_EvtType[EffectName] >= scaling_factor, ]
years <- as.character(format( as.Date(ST_EvtType$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
effectCount <- as.character(ST_EvtType[EffectName][,1])
yearEffectCount <- paste0(years,rep(x=" (",length(years)), effectCount,rep(x=")",length(years)))
maxLabel <- max(as.numeric(effectCount))
scaling_factor_label <- maxLabel/1.5
cex_labels <- sapply( X=as.vector(effectCount),FUN=function(x) as.numeric(x)/scaling_factor_label )
pos_labels <- rep(c(2,1,1,4),times=(length(cex_labels)/4))
#    text( -ST_EvtType$LONGITUDE/100, cex=cex_labels, ST_EvtType$LATITUDE/100, labels=yearEffectCount, pos=pos_labels )
df <- storm_data_ST_EvtType[storm_data_ST_EvtType$LATITUDE > 0 & storm_data_ST_EvtType$LONGITUDE > 0,]
dfMod <- transform( df, LATITUDE=df$LATITUDE/100, LONGITUDE=-df$LONGITUDE/100)
}
GenerateFatalityLabels <- function(df){
yearsTornados <-as.character(strftime(as.Date.factor(df$BGN_DATE,format= "%d/%m/%Y"),"%Y-%m-%d"))
labels <- mapply(FUN=function(x,y,z) paste(sep=" ",
ifelse(is.na(y), "No date: ", paste0(y, ": ")),
paste0(z, " ", as.character(x),
ifelse(x<2," fatality"," fatalities"))),
df$FATALITIES,
yearsTornados,
df$EVTYPE )
l <- unlist(labels)
}
dfFatalities0 <- GetStateStormData(df,"FATALITIES","Hurricanes/Tornados/Thunderstorms")
dfFatalities <- head(dfFatalities0)
#paste0("ALL = ",length(df$COUNTY))
#paste0("AL = ", length(dfST$COUNTY))
#paste0("Ratio = ", length(dfST$COUNTY)/length(df$COUNTY) )
#df %>%
#popup_labels <- sapply( X=dfFatalities$FATALITIES,FUN=function(x) paste0( as.character(x), " fatalities") )
years <-as.character(strftime(as.Date.factor(dfFatalities$BGN_DATE,format= "%d/%m/%Y"),"%Y-%m-%d"))
popup_labels <- mapply(FUN=function(x,y,z) paste(sep=" ",
ifelse(is.na(y), "No date: ", paste0(y, ": ")),
paste0(z, " ", as.character(x),
ifelse(x<2," fatality"," fatalities"))),
dfFatalities$FATALITIES,
years,
dfFatalities$EVTYPE)
dfFatalities$Label <- popup_labels
dfFatalTornados <- dfFatalities[dfFatalities$EVTYPE=="TORNADO",]
dfFatalHighWind <- dfFatalities[dfFatalities$EVTYPE=="HIGH WIND",]
dfFatalThunderWind <- dfFatalities[dfFatalities$EVTYPE=="THUNDERSTORM WIND",]
dfFatalMarineWind <- dfFatalities[(dfFatalities$EVTYPE=="MARINE STRONG WIND") | (dfFatalities$EVTYPE == "MARINE THUNDERSTORM WIND"),]
dfFatalTornados$Labels <- GenerateFatalityLabels(dfFatalTornados)
dfFatalTornados$Label
dfFatalHighWind$Labels <- GenerateFatalityLabels(dfFatalHighWind)
dfFatalThunderWind$Labels <- GenerateFatalityLabels(dfFatalThunderWind)
dfFatalMarineWind$Labels <- GenerateFatalityLabels(dfFatalMarineWind)
dfFatalHighWind$Label
leaflet() %>%
addTiles() %>%
addMarkers(data= dfFatalTornados,
lat = ~ LATITUDE,
lng = ~ LONGITUDE,
label = ~ Label,
labelOptions = labelOptions(noHide = F, textsize = "12px"),
clusterOptions = markerClusterOptions(),
group = "Tornados")
leaflet() %>%
addTiles() %>%
addMarkers(data= dfFatalTornados,
lat = ~ LATITUDE,
lng = ~ LONGITUDE,
label = ~ Label,
labelOptions = labelOptions(noHide = F, textsize = "12px"),
clusterOptions = markerClusterOptions(),
group = "Tornados") %>%
addMarkers(data= dfFatalHighWind,
lat = ~ LATITUDE,
lng = ~ LONGITUDE,
label = ~ Label,
labelOptions = labelOptions(noHide = F, textsize = "12px"),
clusterOptions = markerClusterOptions(),
group = "High Winds") %>%
addLayersControl(
overlayGroups=c("Tornados","High Winds"),
options=layersControlOptions(collapsed=FALSE))
leaflet() %>%
addTiles() %>%
addMarkers(data= dfFatalTornados,
lat = ~ LATITUDE,
lng = ~ LONGITUDE,
label = ~ Label,
labelOptions = labelOptions(noHide = F, textsize = "12px"),
clusterOptions = markerClusterOptions(),
group = "Tornados")
library(leaflet)
#load storm data as df
load(file="./usa_storm_data.RData")
#Testing that there is actually data to work with:
#df[df$EVT_TYPE == "Hurricanes/Tornados/Thunderstorms" & df$FATALITIES > 100,][c('STATE','LATITUDE','LONGITUDE')]
GetStateStormData <- function( stormDataFrame, EffectName, EventType, cutOffLabels=1.0) {
## stormDataFrame, ST=state abbreviation, EffectName=exact data frame column heading
## Subset the storm.data.frame
#storm_data_ST <- stormDataFrame[stormDataFrame$STATE == ST,]
storm_data_ST_EvtType <- stormDataFrame[ stormDataFrame$EVT_TYPE == EventType
& stormDataFrame[EffectName]>=1,]
maxVal<-max(storm_data_ST_EvtType[EffectName]) # extract the value
scaling_factor<- cutOffLabels * maxVal/6.0
cex_values <- sapply( X=as.vector(storm_data_ST_EvtType[EffectName]),
FUN=function(x) x/scaling_factor )
#    points(-storm_data_ST_EvtType$LONGITUDE/100, storm_data_ST_EvtType$LATITUDE/100,
#           pch=21, bg=alpha("red",0.25), cex=cex_values)
ST_EvtType <- storm_data_ST_EvtType[ storm_data_ST_EvtType[EffectName] >= scaling_factor, ]
years <- as.character(format( as.Date(ST_EvtType$BGN_DATE, format = "%m/%d/%Y %H:%M:%S"), "%Y"))
effectCount <- as.character(ST_EvtType[EffectName][,1])
yearEffectCount <- paste0(years,rep(x=" (",length(years)), effectCount,rep(x=")",length(years)))
maxLabel <- max(as.numeric(effectCount))
scaling_factor_label <- maxLabel/1.5
cex_labels <- sapply( X=as.vector(effectCount),FUN=function(x) as.numeric(x)/scaling_factor_label )
pos_labels <- rep(c(2,1,1,4),times=(length(cex_labels)/4))
#    text( -ST_EvtType$LONGITUDE/100, cex=cex_labels, ST_EvtType$LATITUDE/100, labels=yearEffectCount, pos=pos_labels )
df <- storm_data_ST_EvtType[storm_data_ST_EvtType$LATITUDE > 0 & storm_data_ST_EvtType$LONGITUDE > 0,]
dfMod <- transform( df, LATITUDE=df$LATITUDE/100, LONGITUDE=-df$LONGITUDE/100)
}
GenerateFatalityLabels <- function(df){
yearsTornados <-as.character(strftime(as.Date.factor(df$BGN_DATE,format= "%d/%m/%Y"),"%Y-%m-%d"))
labels <- mapply(FUN=function(x,y,z) paste(sep=" ",
ifelse(is.na(y), "No date: ", paste0(y, ": ")),
paste0(z, " ", as.character(x),
ifelse(x<2," fatality"," fatalities"))),
df$FATALITIES,
yearsTornados,
df$EVTYPE )
l <- unlist(labels)
}
dfFatalities0 <- GetStateStormData(df,"FATALITIES","Hurricanes/Tornados/Thunderstorms")
dfFatalities <- head(dfFatalities0)
#paste0("ALL = ",length(df$COUNTY))
#paste0("AL = ", length(dfST$COUNTY))
#paste0("Ratio = ", length(dfST$COUNTY)/length(df$COUNTY) )
#df %>%
#popup_labels <- sapply( X=dfFatalities$FATALITIES,FUN=function(x) paste0( as.character(x), " fatalities") )
years <-as.character(strftime(as.Date.factor(dfFatalities$BGN_DATE,format= "%d/%m/%Y"),"%Y-%m-%d"))
popup_labels <- mapply(FUN=function(x,y,z) paste(sep=" ",
ifelse(is.na(y), "No date: ", paste0(y, ": ")),
paste0(z, " ", as.character(x),
ifelse(x<2," fatality"," fatalities"))),
dfFatalities$FATALITIES,
years,
dfFatalities$EVTYPE)
dfFatalities$Label <- popup_labels
dfFatalTornados <- dfFatalities[dfFatalities$EVTYPE=="TORNADO",]
dfFatalHighWind <- dfFatalities[dfFatalities$EVTYPE=="HIGH WIND",]
dfFatalThunderWind <- dfFatalities[dfFatalities$EVTYPE=="THUNDERSTORM WIND",]
dfFatalMarineWind <- dfFatalities[(dfFatalities$EVTYPE=="MARINE STRONG WIND") | (dfFatalities$EVTYPE == "MARINE THUNDERSTORM WIND"),]
dfFatalTornados$Label <- GenerateFatalityLabels(dfFatalTornados)
dfFatalHighWind$Label <- GenerateFatalityLabels(dfFatalHighWind)
dfFatalThunderWind$Label <- GenerateFatalityLabels(dfFatalThunderWind)
dfFatalMarineWind$Label <- GenerateFatalityLabels(dfFatalMarineWind)
leaflet() %>%
addTiles() %>%
addMarkers(data= dfFatalTornados,
lat = ~ LATITUDE,
lng = ~ LONGITUDE,
label = ~ Label,
labelOptions = labelOptions(noHide = F, textsize = "12px"),
clusterOptions = markerClusterOptions(),
group = "Tornados") %>%
addMarkers(data= dfFatalHighWind,
lat = ~ LATITUDE,
lng = ~ LONGITUDE,
label = ~ Label,
labelOptions = labelOptions(noHide = F, textsize = "12px"),
clusterOptions = markerClusterOptions(),
group = "High Winds") %>%
addLayersControl(
overlayGroups=c("Tornados","High Winds"),
options=layersControlOptions(collapsed=FALSE))
leaflet() %>%
addTiles() %>%
addMarkers(data= dfFatalTornados,
lat = ~ LATITUDE,
lng = ~ LONGITUDE,
label = ~ Label,
labelOptions = labelOptions(noHide = F, textsize = "12px"),
clusterOptions = markerClusterOptions(),
group = "Tornados")
