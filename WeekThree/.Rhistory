ColumnClass <- function( col ) {
ifelse(is.data.frame(col), class(col[[1]]), class(col))
}
extractNumericCols <- function( df ) {
# get the column names to index inot the data frame
col_names <- colnames(df)
# nullify the columns with non-numeric values, return list of data.frames
l <- sapply(col_names, function(x) {
cls <- ColumnClass( df[x] )
if (cls %in% c("numeric","integer"))
df[x]
else
NULL
})
# get a logical index vector where there were non numeric values
isNULL <- which(l[names(l)] =="NULL")
# get the opposite mask
ll <- l[-isNULL]
# compose a data frame with the numeric columns (data.frames)
ndf <- do.call(cbind.data.frame,ll)
}
extractColumnsWithTooManyNAs <- function( df){
l <- sapply(colnames(df), function(x) any( is.na(df[x][[1]]) ) )
df[-which(l)]
}
tstdat<-read.csv(file="data/pml-testing.csv")
trndat<-read.csv(file="data/pml-training.csv")
# new data frame with only numeric columns:
trainSet <- extractNumericCols(trndat)
# add outcome column as column #1:
trainSet$classe <- trndat$classe
# filter the numeric columns in the test set
numericColNames <- colnames(trainSet)
testSet <- tstdat[,which(colnames(tstdat) %in% numericColNames)]
#if there are still columns with NAs eliminate them altogether
trainClean <- extractColumnsWithTooManyNAs(trainSet)
testClean <- extractColumnsWithTooManyNAs(testSet)
print(paste0("'trainClean' data set with ",dim(trainClean)[1], " observations", " on ", dim(trainClean)[2]-1, " variables."))
print(paste0("'testClean' data set with ", dim(testClean)[1], " observations on ", dim(testClean)[2], " variables."))
#library(gridExtra)
library(caret)
preproc <- preProcess(trainClean[-1],method = "pca",pcaComp = 5)
dumbbellPC <- predict(preproc,trainClean[-1])
featurePlot(x=dumbbellPC,y=trainClean$classe,plot="pairs")
#g1 <- qplot(dumbbellPC$PC1,dumbbellPC$PC2,colour=dumbbellPC$PC3)
# g2 <- qplot(dumbbellPC$PC1,dumbbellPC$PC2,colour=dumbbellPC$PC4)
# g3 <- qplot(dumbbellPC$PC1,dumbbellPC$PC2,colour=dumbbellPC$PC5)
# grid.arrange(g1,g2,g3,ncol=1)
dumbbellPC$classe <- trainClean$classe
library(doParallel)
# cl<-makeCluster(detectCores())
cl<-makeCluster(4)
registerDoParallel(cl)
require(randomForest)
# recursive feature evaluation
set.seed(1)
subsets <- c(1:5, 10, 15, 20, 25)
# using bag trees
ctrl <- rfeControl(functions = treebagFuncs,
method = "repeatedcv",
repeats = 5,
verbose = FALSE)
tstdat<-read.csv(file="data/pml-testing.csv")
trndat<-read.csv(file="data/pml-training.csv")
install.packages(c("Amelia", "ape", "arules", "bbmle", "BH", "ca", "car", "caret", "coin", "curl", "DescTools", "devtools", "digest", "directlabels", "earth", "fields", "gamlss", "gamlss.data", "geepack", "GGally", "ggplot2", "git2r", "Hmisc", "htmltools", "httr", "jsonlite", "kernlab", "knitr", "latticeExtra", "lda", "logspline", "mapdata", "maps", "maptools", "Matching", "maxLik", "mclust", "MCMCpack", "mda", "memoise", "mice", "microbenchmark", "multcomp", "MuMIn", "mvtnorm", "pan", "party", "partykit", "plm", "plotrix", "prodlim", "R6", "RandomFields", "RandomFieldsUtils", "randomForestSRC", "raster", "rattle", "Rcpp", "RcppArmadillo", "RcppEigen", "rmarkdown", "roxygen2", "Rsolnp", "rstudioapi", "RUnit", "sfsmisc", "sgeostat", "Sleuth2", "snow", "sp", "spam", "SuppDists", "TH.data", "timeSeries", "urca", "vcdExtra", "VGAM", "VGAMdata", "xtable", "Zelig"))
install.packages(c("Amelia", "ape", "arules", "bbmle", "BH",
install.packages(c("Amelia", "ape", "arules", "bbmle"))
install.packages(c("Amelia", "ape", "arules", "bbmle"))
install.packages("BH")
install.packages(c("ca", "car", "caret"))
install.packages(c("ca", "car", "caret"))
install.packages(c("ca", "car", "caret"))
install.packages(c("ca", "car", "caret"))
install.packages("car")
install.packages("car")
install.packages("car")
install.packages("coin")
install.packages("curl")
install.packages(c("DescTools", "devtools"))
install.packages(c("digest", "directlabels"))
install.packages(c("digest", "directlabels"))
install.packages("earth")
install.packages(c("fields", "gamlss"))
install.packages(c("gamlss.data", "geepack"))
install.packages(c("GGally", "ggplot2"))
install.packages(c("git2r", "Hmisc", "htmltools"))
install.packages(c("httr", "jsonlite", "kernlab"))
install.packages(c("knitr", "latticeExtra"))
install.packages(c("lda", "logspline", "mapdata"))
install.packages(c("maps", "maptools", "Matching"))
install.packages(c("maxLik", "mclust", "MCMCpack"))
install.packages("car")
install.packages("pbkrtest")
install.packages("pbkrtest")
install.packages(c("mda", "memoise", "mice"))
install.packages(c("microbenchmark", "multcomp", "MuMIn"))
install.packages("installr"); library(installr)
install.packages(c("mvtnorm", "pan", "party"))
install.packages("installr")
install.packages("car")
install.packages("car")
install.packages("car")
install.packages(c("lme4", "partykit", "plm", "plotrix", "prodlim"))
install.packages(c("lme4", "partykit", "plm", "plotrix", "prodlim"))
install.packages(c("lme4", "partykit", "plm", "plotrix", "prodlim"))
install.packages(c("R6", "RandomFields", "RandomFieldsUtils"))
install.packages(c("randomForestSRC", "raster", "rattle"))
install.packages(c("Rcpp", "RcppArmadillo", "RcppEigen", "rmarkdown"))
install.packages(c("Rcpp", "RcppArmadillo", "RcppEigen", "rmarkdown"))
install.packages(c("roxygen2", "Rsolnp", "rstudioapi", "RUnit"))
install.packages(c("sfsmisc", "sgeostat", "Sleuth2", "snow", "sp", "spam", "SuppDists", "TeachingDemos", "TH.data", "timeSeries", "urca", "vcdExtra", "VGAM", "VGAMdata", "xtable", "Zelig"))
install.packages(c("curl", "GenSA", "Hmisc", "maps", "MBESS", "multcomp", "munsell", "NLP", "polyclip", "quantreg", "testit"))
install.packages('MBESS')
install.packages('GSL')
install.packages('gsl')
install.packages(c("ada", "ape", "arules", "BH", "car", "caret", "cba", "corrplot", "curl", "DBI", "devtools", "evaluate", "Fahrmeir", "fields", "formatR", "gamlss", "gamlss.data", "gamlss.dist", "geoR", "GGally", "git2r", "glmnet", "gplots", "hdi", "highr", "Hmisc", "htmltools", "jsonlite", "kernlab", "knitr", "lava", "lazyeval", "lme4", "Matrix", "mclust", "mitml", "mnormt", "multcomp", "nlme", "openssl", "penalized", "plotrix", "plyr", "polyclip", "quantreg", "qvcalc", "RandomFields", "RandomFieldsUtils", "randomForestSRC", "raster", "rasterVis", "Rcpp", "RcppArmadillo", "relimp", "rmarkdown", "rpart.plot", "rpf", "scatterplot3d", "sem", "semTools", "sp", "stringi", "tseries", "TTR", "VGAM", "VGAMdata", "visNetwork", "zoo"))
install.packages(c("ada", "ape", "arules", "BH", "car", "caret",
install.packages("ada")
install.packages("ape")
install.packages("arules")
install.packages(c("BH", "car", "caret"))
library("abind", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
library("acepack", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
detach("package:abind", unload=TRUE)
detach("package:acepack", unload=TRUE)
install.packages(c("cba", "corrplot", "curl"))
install.packages(c("DBI", "devtools", "evaluate"))
install.packages(c("Fahrmeir", "fields", "formatR"))
install.packages(c("gamlss", "gamlss.data", "gamlss.dist"))
install.packages(c("geoR", "GGally", "git2r"))
install.packages(c("GGally", "glmnet", "gplots"))
install.packages(c("GGally", "hdi", "highr"))
install.packages(c("GGally", "Hmisc"))
install.packages(c("GGally", "htmltools", "jsonlite"))
install.packages(c("GGally", "kernlab", "knitr"))
install.packages(c("GGally", "lava", "lazyeval"))
install.packages("GGally")
install.packages("gridBase")
install.packages("GGally")
install.packages(c("lme4", "Matrix", "mclust"))
install.packages(c("lme4", "Matrix", "mclust"))
install.packages(c("mitml", "mnormt", "multcomp"))
install.packages("openssl")
install.packages(c("penalized", "plotrix", "plyr"))
install.packages(c("penalized", "plotrix", "plyr"))
install.packages(c("penalized", "plotrix", "plyr"))
install.packages("polyclip")
install.packages(c("raster", "rasterVis", "Rcpp"))
install.packages(c("raster", "rasterVis", "Rcpp"))
install.packages(c("RandomFields", "RandomFieldsUtils", "randomForestSRC"))
install.packages(c("rmarkdown", "rpart.plot"))
install.packages(c("sp", "TTR"))
install.packages(c("quantreg", "qvcalc"))
install.packages(c("quantreg", "qvcalc"))
install.packages("relimp")
install.packages("RcppArmadillo")
install.packages(c("rpf", "scatterplot3d"))
install.packages("stringi")
install.packages("stringi")
install.packages("nlme")
install.packages("nlme")
install.packages("sem")
install.packages("semTools")
install.packages(c("tseries", "VGAM"))
install.packages(c("VGAMdata", "visNetwork", "zoo"))
install.packages("GGally")
install.packages(c("abind", "arm", "arules", "betareg", "car", "caret", "CORElearn", "curl", "DBI", "DescTools", "devtools", "DiagrammeR", "digest", "dplyr", "earth", "gam", "geepack", "GGally", "haven", "htmlwidgets", "httr", "jsonlite", "knitr", "lava", "lavaan", "maps", "Matrix", "mda", "mime", "multcomp", "neuralnet", "nor1mix", "numDeriv", "OpenMx", "partykit", "plotmo", "plotrix", "proxy", "psychotools", "psychotree", "quantmod", "quantreg", "R2HTML", "R6", "RandomFields", "RandomFieldsUtils", "randomForestSRC", "Rcpp", "RcppArmadillo", "RcppEigen", "rmarkdown", "rpart.plot", "rpf", "rstudioapi", "rversions", "sem", "semTools", "Sleuth2", "sna", "som", "spam", "SparseM", "splancs", "StanHeaders", "stringr", "subselect", "survey", "truncreg", "ucminf", "urca", "visNetwork", "withr", "xml2"))
install.packages(c("abind", "arm", "arules", "betareg", "car",
install.packages(c("abind", "arm", "arules"))
install.packages("abind")
install.packages("abind")
install.packages("arm")
install.packages("arules")
install.packages("betareg")
install.packages(c("car", "caret"))
install.packages(c("car", "caret"))
install.packages(c("car", "caret"))
install.packages(c("CORElearn", "curl"))
install.packages(c("DBI", "DescTools", "devtools"))
install.packages(c("DiagrammeR", "digest", "dplyr"))
install.packages("earth")
install.packages("gam")
install.packages("geepack")
install.packages("GGally")
install.packages("haven")
install.packages("htmlwidgets")
install.packages("httr")
install.packages("jsonlite")
install.packages("knitr")
install.packages("lava")
install.packages("lavaan")
install.packages("maps")
install.packages("Matrix")
install.packages("Matrix")
install.packages("mda")
install.packages("mime")
install.packages("multcomp")
install.packages("neuralnet")
install.packages("nor1mix")
install.packages("numDeriv")
install.packages("OpenMx")
install.packages("OpenMx")
install.packages("OpenMx")
install.packages("OpenMx")
install.packages(c("acepack", "arules", "caret"))
install.packages(c("acepack", "arules", "caret"))
install.packages(c("colorspace", "CompQuadForm", "curl"))
install.packages(c("colorspace", "CompQuadForm", "curl"))
install.packages("CompQuadForm")
install.packages("CompQuadForm")
install.packages("CompQuadForm")
install.packages("DescTools")
install.packages("earth")
install.packages(c("evaluate", "gamair", "gamlss"))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("gamlss.dist")
install.packages(c("Hmisc", "htmlwidgets", "kernlab"))
install.packages(c("knitr", "lava"))
install.packages(c("lokern", "mnormt", "openssl"))
install.packages(c("plotmo", "pmml", "proto"))
install.packages("quantmod")
install.packages("CompQuadForm")
install.packages(c("R6", "RandomFields"))
install.packages(c("RandomFieldsUtils", "randomForestSRC"))
install.packages(c("RcppArmadillo", "reshape"))
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("rmarkdown")
install.packages(c("rpart.plot", "semTools"))
install.packages(c("snow", "SparseM", "stringi"))
install.packages(c("snow", "SparseM", "stringi"))
install.packages(c("testit", "timereg"))
install.packages(c("visNetwork", "XML"))
install.packages("CompQuadForm")
install.packages("installr")
install.packages("CompQuadForm")
install.packages("yaml")
help(csv)
ABCup12=read.csv(file="/home/pablo/Documents/Personal/AB Cup/Confirmation List.csv",header = TRUE)
ABCup12$cpl_distance_pts
ABCup12$Saturday
ABCup12$Saturday[,==PeeWee Boys]
ABCup12$Saturday[PeeWee Boys,]
ABCup12$Saturday["PeeWee Boys",]
ABCup12$Saturday[=PeeWee Boys,]
require(dplyr)
dplyr::arrange(ABCup12,Saturday)
x<-dplyr::arrange(ABCup12,Saturday)
x$Saturday
dplyr::filter(ABCup12,Saturday==PeeWee Boys)
dplyr::filter(ABCup12,Saturday=="PeeWee Boys")
dplyr::filter(ABCup12,Saturday=="Masters 5&6 Men")
dplyr::filter(ABCup12,Saturday=="Masters 1&2 Women")
dplyr::filter(ABCup12,Saturday=="Senior Men")
library("abind", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("AER")
install.packages(c("backports", "cba", "chron", "CompQuadForm", "data.table", "date", "DiagrammeR", "digest", "e1071", "expm", "fastmatch", "ggplot2", "git2r", "Hmisc", "htmlTable", "jsonlite", "lava", "leaps", "maptools", "Matrix", "maxlike", "mclust", "nlme", "OpenMx", "openssl", "party", "penalized", "plotrix", "pROC", "prodlim", "RandomFields", "RandomFieldsUtils", "Rcpp", "RcppArmadillo", "roxygen2", "rprojroot", "RSQLite", "scatterplot3d", "sp", "stabs", "StanHeaders", "tabplot", "TH.data", "tis", "tseries", "VGAM", "VGAMdata", "visNetwork", "xml2"))
install.packages(c("backports", "cba", "chron", "CompQuadForm", "data.table", "date", "DiagrammeR", "digest", "e1071", "expm", "fastmatch", "ggplot2", "git2r", "Hmisc", "htmlTable", "jsonlite", "lava", "leaps", "maptools", "Matrix", "maxlike", "mclust", "nlme", "OpenMx", "openssl", "party", "penalized", "plotrix", "pROC", "prodlim", "RandomFields", "RandomFieldsUtils", "Rcpp", "RcppArmadillo", "roxygen2", "rprojroot", "RSQLite", "scatterplot3d", "sp", "stabs", "StanHeaders", "tabplot", "TH.data", "tis", "tseries", "VGAM", "VGAMdata", "visNetwork", "xml2"))
install.packages("CompQuadForm")
version
install.packages("CompQuadForm")
install.packages("CompQuadForm")
version
install.packages("CompQuadForm")
load("~/Courses/Data Analysis Specialization/Reproducible research/Week Three/Project2 Nov 21 2014/ChoroplethByStates.R")
load("~/Courses/Data Analysis Specialization/Reproducible research/Week Three/Project2 Nov 21 2014/ChoroplethByStates.R")
load("~/Courses/Data Analysis Specialization/Reproducible research/Week Three/Project2 Nov 21 2014/Choropleth.R")
install.packages("maptools")
cbind?
?
X=data.frame(x1=rnorm(10)*10,x2=rnorm(20)*1.5)
X
X=data.frame(x1=rnorm(10)*10,x2=rnorm(20)*1.5,x2=abs(rnorm(10)*120))
X
X1 <- cbind(1,X)
X1
b=c(0.3,0.9,2)
X %*% b
Xm <- as.matrix(X)
Xm %*% b
drop( Xm %*% b)
Xm <- X$x1
Xm %*% b
Xm
rnotm(10)
rnorm(10)
rnorm(10)*10
X=data.frame(x1=rnorm(10)*10,x2=rnorm(10)*1.5,x2=abs(rnorm(10)*120))
Xm <- X$x1
Xm %*% b
y = rnorm(10)*2.5
y
pvals <- numeric(3)
pvals
for (i in seq_len(ncol(X))) {
fit <- lm(y ~ x[,i])
summ <- summary(fit)
pval[i] <- summ$coefficients[2,4]
}
for (i in seq_len(ncol(X))) {
fit <- lm(y ~ X[,i])
summ <- summary(fit)
pval[i] <- summ$coefficients[2,4]
}
for (i in seq_len(ncol(X))) {
fit <- lm(y ~ X[,i])
summ <- summary(fit)
pvals[i] <- summ$coefficients[2,4]
}
pvals
ord <- order(pvals)
ord
x3 <-X[,ord]
x3
X=data.frame(x1=rnorm(10)*10,x2=rnorm(10)*1.5,x3=abs(rnorm(10)*120))
for (i in seq_len(ncol(X))) {
fit <- lm(y ~ X[,i])
summ <- summary(fit)
pvals[i] <- summ$coefficients[2,4]
}
ord <- order(pvals)
ord
x3 <-X[,ord]
x3
ord
set.seed(10000)
X=data.frame(x1=rnorm(10)*10,x2=rnorm(10)*1.5,x3=abs(rnorm(10)*120))
X
pvals <- numeric(3)
for (i in seq_len(ncol(X))) {
fit <- lm(y ~ X[,i])
summ <- summary(fit)
pvals[i] <- summ$coefficients[2,4]
}
pvals
ord <- order(pvals)
ord
x3 <- X[,ord]
x3
fit <- lm(y ~ x3)
View(ABCup12)
View(ABCup12)
y
y <- rnorm(3)*2.5
for (i in seq_len(ncol(X))) {
fit <- lm(y ~ X[,i])
summ <- summary(fit)
pvals[i] <- summ$coefficients[2,4]
}
y<-2.5
for (i in seq_len(ncol(X))) {
fit <- lm(y ~ X[,i])
summ <- summary(fit)
pvals[i] <- summ$coefficients[2,4]
}
y <- rnorm(3)*2.5
for (i in seq_len(ncol(X))) {
fit <- lm(y ~ X[,i])
summ <- summary(fit)
pvals[i] <- summ$coefficients[2,4]
}
lm(y ~ X[, 1])
X
X=data.frame(x1=rnorm(10)*10,x2=rnorm(10)*1.5,x3=abs(rnorm(10)*120))
X
lm(y ~ X[, 1])
X[, 1]
y
y=2.5
lm(y ~ X[, 1])
y <- rnorm(10)*2.5
lm(y ~ X[, 1])
for (i in seq_len(ncol(X))) {
fit <- lm(y ~ X[,i])
summ <- summary(fit)
pvals[i] <- summ$coefficients[2,4]
}
pvals
ord <- order(pvals)
ord
summ
summ$coefficients
summ$coefficients[2,]
summ$coefficients[1,]
summ$coefficients[0,]
summ$coefficients[2,4]
x3 <- X[,ord]
x3
x2 <- X[,ord[1:2]]
x2
fit <- lm(y ~ x2)
x2
fit <- lm(y ~ x2)
x2m <- as.data.frame((x2))
fit <- lm(y ~ x2m)
x2m
y
x2m <- as.matrix((x2))
fit <- lm(y ~ x2m)
fit
coef(fit)
predictors <- data.frame(xp1=rnorm(10)*120,xp2=rnorm(10)*1.5)
predictors %*% coef(fit)
coef(fit)
b <-coef(fit)[1:2]
b
b <-coef(fit)[2:3]
b
predictors %*% b
as.vector(b)
b<-as.vector(b)
predictors %*% b
X
predictors
predictors %*% b
predictors * b
p <- cbind(1,predictors)
p
p %*% b
p * b
drop(p * b)
drop(1:3 %*% 2:4)
1:3 %*% 2:4
1:3 * 2:4
set.seed(2)
x<-rnorm(100)
mean(x)
head(getS3method("mean","default"), 10)
head(getS3method("mean","default"), 20)
head(getS3method("mean","default"), 25)
mean.default(x)
df<-data.frame(x1=rnorm(100),x2=as.ts(rnorm(100)))
sapply(df)
sapply(df, mean)
df2<-data.frame(x1=rnorm(100),x2=rnorm(100))
sapply(df2, mean)
df3<-data.frame(x1=df2$x1,as.ts(df2$x2))
sapply(df3, mean)
plot(df3$x1,df3$as.ts.df2.x2.)
df3<-data.frame(x1=df2$x1,x2=as.ts(df2$x2))
sapply(df3, mean)
plot(df3$x1,df3$x2.)
plot(df3$x1,df3$x2)
df3$x2
plot(df3$3,df3$x2)
plot(df3$x1,df3$x2)
plot(df3$x2)
plot(df3$x1)
x<-c(1.3,1.6,4.1)
y<-(2.5,4.3,-1.3)
y<-c(2.5,4.3,-1.3)
xp<- c(x,x[1])
yp<-c(y,y[1])
xp
yp
plot(x,y, type="n")
lines(xp,yp)
library(methods)
setClass("polygon",
representation(x="numeric",
y="numeric"))
setMethod("plot","polygon",
function(x,y,...){
plot(x@x,x@y, type = "n",...)
xp <- c(x@x, x@x[1])
yp <- c(x@y, x@y[1])
lines(xp,yp)
}
)
p<-new("polygon")
p@x=x
p@y<-y
plot(p)
colSums
?colSums
?lm
?dgamma()
createmean <- function(x) {
answer <- mean(x)
return(answer)
}
createmean(c(1.2,5.6,2.1))
setwd("~/Courses/Data Analysis Specialization/Developing Data Products/WeekThree")
